"use strict";(self.webpackChunkmui_color_input=self.webpackChunkmui_color_input||[]).push([[491],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(t),f=l,m=d["".concat(u,".").concat(f)]||d[f]||c[f]||r;return t?a.createElement(m,i(i({ref:n},s),{},{components:t})):a.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_position:3},i="API Reference",o={unversionedId:"api-reference",id:"api-reference",title:"API Reference",description:"This article discusses the API and props of MuiColorInput. Props are defined within MuiColorInputProps.",source:"@site/docs/api-reference.md",sourceDirName:".",slug:"/api-reference",permalink:"/mui-color-input/docs/api-reference",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Color validation",permalink:"/mui-color-input/docs/color-validation"},next:{title:"TextField inheritance",permalink:"/mui-color-input/docs/inheritance"}},u={},p=[{value:"<code>value</code>",id:"value",level:2},{value:"Hex, 8-digit (RGBA) Hex",id:"hex-8-digit-rgba-hex",level:3},{value:"RGB, RGBA",id:"rgb-rgba",level:3},{value:"HSL, HSLA",id:"hsl-hsla",level:3},{value:"HSV, HSVA",id:"hsv-hsva",level:3},{value:"<code>onChange</code>",id:"onchange",level:2},{value:"<code>format</code>",id:"format",level:2},{value:"<code>fallbackValue</code>",id:"fallbackvalue",level:2},{value:"<code>isAlphaHidden</code>",id:"isalphahidden",level:2}],s={toc:p};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference"},"API Reference"),(0,l.kt)("p",null,"This article discusses the API and props of ",(0,l.kt)("strong",{parentName:"p"},"MuiColorInput"),". Props are defined within ",(0,l.kt)("inlineCode",{parentName:"p"},"MuiColorInputProps"),"."),(0,l.kt)("h2",{id:"value"},(0,l.kt)("inlineCode",{parentName:"h2"},"value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"MuiColorInputValue")),(0,l.kt)("li",{parentName:"ul"},"Required: ",(0,l.kt)("inlineCode",{parentName:"li"},"true"))),(0,l.kt)("p",null,"The string parsing is very permissive. It is meant to make typing a color as input as easy as possible. All commas, percentages, parenthesis are optional, and most input allow either 0-1, 0%-100%, or 0-n (where n is either 100, 255, or 360 depending on the value)."),(0,l.kt)("p",null,"HSL and HSV both require either 0%-100% or 0-1 for the ",(0,l.kt)("inlineCode",{parentName:"p"},"S"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"L"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"V")," properties. The ",(0,l.kt)("inlineCode",{parentName:"p"},"H")," (hue) can have values between 0%-100% or 0-360."),(0,l.kt)("p",null,"RGB input requires either 0-255 or 0%-100%."),(0,l.kt)("p",null,"Source : ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/scttcper/tinycolor#accepted-string-input"},"https://github.com/scttcper/tinycolor#accepted-string-input")),(0,l.kt)("p",null,"Here are some examples of string input:"),(0,l.kt)("h3",{id:"hex-8-digit-rgba-hex"},"Hex, 8-digit (RGBA) Hex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput value="#000" />\n<MuiColorInput value="000" />\n<MuiColorInput value="#369C" />\n<MuiColorInput value="#f0f0f6" />\n<MuiColorInput value="#f0f0f688" />\n<MuiColorInput value="f0f0f688" />\n')),(0,l.kt)("h3",{id:"rgb-rgba"},"RGB, RGBA"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput value="rgb (255, 0, 0)" />\n<MuiColorInput value="rgb 255 0 0" />\n<MuiColorInput value="rgba (255, 0, 0, .5)" />\n<MuiColorInput value={{ r: 255, g: 0, b: 0 }} />\n')),(0,l.kt)("h3",{id:"hsl-hsla"},"HSL, HSLA"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput value="hsl(0, 100%, 50%)" />\n<MuiColorInput value="hsla(0, 100%, 50%, .5)" />\n<MuiColorInput value="hsl 0 1.0 0.5" />\n<MuiColorInput value={{ h: 0, s: 1, l: 0.5 }} />\n')),(0,l.kt)("h3",{id:"hsv-hsva"},"HSV, HSVA"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput value="hsv(0, 100%, 50%)" />\n<MuiColorInput value="hsva(0, 100%, 50%, .5)" />\n<MuiColorInput value="hsv (0 100% 100%)" />\n<MuiColorInput value={{ h: 0, s: 100, v: 100 }} />\n')),(0,l.kt)("h2",{id:"onchange"},(0,l.kt)("inlineCode",{parentName:"h2"},"onChange")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"(color: string, colors: MuiColorInputColors) => void")),(0,l.kt)("li",{parentName:"ul"},"Required: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"Gets called once the user updates the color value."),(0,l.kt)("p",null,"The callback gives you ",(0,l.kt)("strong",{parentName:"p"},"2 parameters"),":"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The new color ",(0,l.kt)("a",{parentName:"li",href:"#value"},"value")," stringified"),(0,l.kt)("li",{parentName:"ol"},"An object of the color value in different formats stringified (",(0,l.kt)("inlineCode",{parentName:"li"},"hex"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"hex8"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"hsl"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"hsv"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"rgb"),")")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'\nconst handleChange = (color, colors) => {\n  /**\n  color: "#ffffff"\n  colors: {\n    hex: "#ffffff",\n    hex8: "#ffffffff",\n    hsl: "hsl(0, 0%, 100%)",\n    hsv: "hsv(0, 0%, 100%)",\n    rgb: "rgb(255, 255, 255)"\n  }\n  **/\n}\n\n<MuiColorInput onChange={handleChange} />\n')),(0,l.kt)("h2",{id:"format"},(0,l.kt)("inlineCode",{parentName:"h2"},"format")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"hex"')),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"MuiColorInputFormat")),(0,l.kt)("li",{parentName:"ul"},"Required: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"The format to use for the color ",(0,l.kt)("a",{parentName:"p",href:"#value"},"value"),". The first parameter of ",(0,l.kt)("inlineCode",{parentName:"p"},"onChange")," respects this format."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Available formats"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"hex"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"hex8"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"hsl"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"hsv")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"rgb"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput format="hex" />\n<MuiColorInput format="hex8" />\n<MuiColorInput format="rgb" />\n<MuiColorInput format="hsv" />\n<MuiColorInput format="hsl" />\n')),(0,l.kt)("h2",{id:"fallbackvalue"},(0,l.kt)("inlineCode",{parentName:"h2"},"fallbackValue")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"black"')),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"MuiColorInputValue")),(0,l.kt)("li",{parentName:"ul"},"Required: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"A fallback color ",(0,l.kt)("a",{parentName:"p",href:"#value"},"value")," in case the user updates the input with an invalid color value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<MuiColorInput fallbackValue="#ffffff" />\n<MuiColorInput fallbackValue="#ffffffff" />\n<MuiColorInput fallbackValue="hsv(0, 0%, 100%)" />\n<MuiColorInput fallbackValue="rgb(255, 255, 255)" />\n<MuiColorInput fallbackValue={{ h: 0, s: 100, v: 100 }} />\n')),(0,l.kt)("h2",{id:"isalphahidden"},(0,l.kt)("inlineCode",{parentName:"h2"},"isAlphaHidden")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")),(0,l.kt)("li",{parentName:"ul"},"Required: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"Whether to show input controls for a color\u2019s alpha channel."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"<MuiColorInput isAlphaHidden />\n")))}c.isMDXComponent=!0}}]);